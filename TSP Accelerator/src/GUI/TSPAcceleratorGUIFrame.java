/*
 * Copyright (C) 2018 Pinhas Nisnevitch
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package GUI;

import Main.Constant;
import Main.Controller;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.HashSet;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;

/**
 * This class is the GUI frame for the TSP Accelerator.
 *
 * @author Pinhas Nisnevitch
 */
public class TSPAcceleratorGUIFrame extends javax.swing.JFrame {

    /**
     * Creates new frame
     */
    public TSPAcceleratorGUIFrame() {
        initComponents();
        setToolBarLayout();
        setRadioButtons();
        setOnlyNumbersTextFields();
    }

    /**
     * Creates new frame
     * @param controller handle the GUI components of the frame.
     */
    public TSPAcceleratorGUIFrame(Controller controller) {
        initComponents();
        setToolBarLayout();
        setRadioButtons();
        setOnlyNumbersTextFields();
        controller.initComponents(item_load_algorithms, item_load_tsp, item_save_tsp, item_preferences, item_clear, item_about, main_panel, bSolveTSP, bStop, bToggleAccelerator, bVisualizeAlgo, list_algo_names, text_field_distance, text_field_mst, text_field_net_depth, radio_b_create, radio_b_delete, radio_b_move, label_cost, label_time);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tool_bar1 = new javax.swing.JToolBar();
        radio_b_create = new javax.swing.JRadioButton();
        radio_b_move = new javax.swing.JRadioButton();
        radio_b_delete = new javax.swing.JRadioButton();
        bSolveTSP = new javax.swing.JButton();
        text_field_net_depth = new javax.swing.JTextField();
        text_field_mst = new javax.swing.JTextField();
        text_field_distance = new javax.swing.JTextField();
        label_net_depth = new javax.swing.JLabel();
        label_distance = new javax.swing.JLabel();
        label_mst_weight = new javax.swing.JLabel();
        bVisualizeAlgo = new javax.swing.JButton();
        label_time = new javax.swing.JLabel();
        label_cost = new javax.swing.JLabel();
        bToggleAccelerator = new javax.swing.JButton();
        bStop = new javax.swing.JButton();
        scroll_algo_names = new javax.swing.JScrollPane();
        list_algo_names = new javax.swing.JList<>();
        labelAlgoName = new javax.swing.JLabel();
        jDesktopMainPane = new javax.swing.JDesktopPane();
        main_panel = new GUI.JPanelObserver();
        menu_bar = new javax.swing.JMenuBar();
        jmenu_file = new javax.swing.JMenu();
        item_load_algorithms = new javax.swing.JMenuItem();
        item_load_tsp = new javax.swing.JMenuItem();
        item_save_tsp = new javax.swing.JMenuItem();
        item_preferences = new javax.swing.JMenuItem();
        jmenu_edit = new javax.swing.JMenu();
        item_clear = new javax.swing.JMenuItem();
        jmenu_Help = new javax.swing.JMenu();
        item_about = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tool_bar1.setRollover(true);
        tool_bar1.setMaximumSize(new java.awt.Dimension(100, 100));
        tool_bar1.setMinimumSize(new java.awt.Dimension(100, 100));
        tool_bar1.setPreferredSize(new java.awt.Dimension(100, 100));

        radio_b_create.setSelected(true);
        radio_b_create.setText(Constant.RADIO_BUTTON_TEXT_CREATE);
        radio_b_create.setFocusable(false);
        radio_b_create.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        radio_b_create.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tool_bar1.add(radio_b_create);

        radio_b_move.setText(Constant.RADIO_BUTTON_TEXT_MOVE);
        radio_b_move.setFocusable(false);
        radio_b_move.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        radio_b_move.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tool_bar1.add(radio_b_move);

        radio_b_delete.setText(Constant.RADIO_BUTTON_TEXT_DELETE);
        radio_b_delete.setFocusable(false);
        radio_b_delete.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        radio_b_delete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tool_bar1.add(radio_b_delete);

        bSolveTSP.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        bSolveTSP.setForeground(new java.awt.Color(0, 153, 153));
        bSolveTSP.setText(Constant.BUTTON_TEXT_SOLVE_TSP);
        bSolveTSP.setFocusable(false);
        bSolveTSP.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bSolveTSP.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tool_bar1.add(bSolveTSP);

        text_field_net_depth.setFont(new java.awt.Font("Lucida Grande", 0, 20)); // NOI18N
        text_field_net_depth.setText(Constant.TEXT_FIELD_NET_HIERARCHY_DEPTH);
        tool_bar1.add(text_field_net_depth);

        text_field_mst.setFont(new java.awt.Font("Lucida Grande", 0, 20)); // NOI18N
        text_field_mst.setText(Constant.TEXT_FIELD_MST_WEIGHT);
        tool_bar1.add(text_field_mst);

        text_field_distance.setFont(new java.awt.Font("Lucida Grande", 0, 20)); // NOI18N
        text_field_distance.setText(Constant.TEXT_FIELD_DISTANCE_FUNCTION);
        tool_bar1.add(text_field_distance);

        label_net_depth.setFont(new java.awt.Font("Lucida Grande", 0, 20)); // NOI18N
        label_net_depth.setText(Constant.LABEL_HIERARCHY_DEPTH_SIZE);
        tool_bar1.add(label_net_depth);

        label_distance.setFont(new java.awt.Font("Lucida Grande", 0, 20)); // NOI18N
        label_distance.setText(Constant.LABEL_DISTANCE_FUNCTION);
        tool_bar1.add(label_distance);

        label_mst_weight.setFont(new java.awt.Font("Lucida Grande", 0, 20)); // NOI18N
        label_mst_weight.setText(Constant.LABEL_MST_WEIGHT);
        tool_bar1.add(label_mst_weight);

        bVisualizeAlgo.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        bVisualizeAlgo.setForeground(new java.awt.Color(0, 102, 153));
        bVisualizeAlgo.setText(Constant.BUTTON_TEXT_VISUALIZATION);
        bVisualizeAlgo.setFocusable(false);
        bVisualizeAlgo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bVisualizeAlgo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tool_bar1.add(bVisualizeAlgo);

        label_time.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        label_time.setForeground(Constant.COLOR_ACCELERATOR_OFF);
        label_time.setText(Constant.LABEL_TOUR_TIME);
        tool_bar1.add(label_time);

        label_cost.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        label_cost.setForeground(Constant.COLOR_ACCELERATOR_OFF);
        label_cost.setText(Constant.LABEL_TOUR_COST);
        tool_bar1.add(label_cost);

        bToggleAccelerator.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        bToggleAccelerator.setForeground(Constant.COLOR_ACCELERATOR_OFF);
        bToggleAccelerator.setText(Constant.BUTTON_TEXT_ACCELERATOR_OFF);
        bToggleAccelerator.setFocusable(false);
        bToggleAccelerator.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bToggleAccelerator.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tool_bar1.add(bToggleAccelerator);

        bStop.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        bStop.setForeground(new java.awt.Color(255, 0, 0));
        bStop.setText(Constant.BUTTON_TEXT_STOP);
        bStop.setFocusable(false);
        bStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tool_bar1.add(bStop);

        scroll_algo_names.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scroll_algo_names.setFont(new java.awt.Font("Lucida Grande", 0, 22)); // NOI18N
        scroll_algo_names.setMaximumSize(new java.awt.Dimension(300, 32767));
        scroll_algo_names.setPreferredSize(new java.awt.Dimension(60, 0));

        list_algo_names.setFont(new java.awt.Font("Lucida Grande", 0, 22)); // NOI18N
        list_algo_names.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list_algo_names.setSelectionBackground(new java.awt.Color(0, 153, 102));
        list_algo_names.setVerifyInputWhenFocusTarget(false);
        list_algo_names.setVisibleRowCount(1);
        list_algo_names.setMaximumSize(new java.awt.Dimension(60, 0));
        scroll_algo_names.setViewportView(list_algo_names);

        tool_bar1.add(scroll_algo_names);

        labelAlgoName.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        labelAlgoName.setForeground(new java.awt.Color(0, 153, 102));
        labelAlgoName.setText(Constant.LABEL_ALGORITHMS_LIST);
        tool_bar1.add(labelAlgoName);

        jDesktopMainPane.setLayout(new java.awt.GridLayout(1, 0));

        main_panel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout main_panelLayout = new javax.swing.GroupLayout(main_panel);
        main_panel.setLayout(main_panelLayout);
        main_panelLayout.setHorizontalGroup(
            main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 704, Short.MAX_VALUE)
        );
        main_panelLayout.setVerticalGroup(
            main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
        );

        jDesktopMainPane.add(main_panel);

        jmenu_file.setText("File");

        item_load_algorithms.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK));
        item_load_algorithms.setText(Constant.BUTTON_TEXT_LOAD_ALGORITHMS);
        jmenu_file.add(item_load_algorithms);

        item_load_tsp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.SHIFT_MASK));
        item_load_tsp.setText(Constant.BUTTON_TEXT_LOAD_TSP_FILE);
        jmenu_file.add(item_load_tsp);

        item_save_tsp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK));
        item_save_tsp.setText(Constant.BUTTON_TEXT_SAVE_TSP_FILE);
        jmenu_file.add(item_save_tsp);

        item_preferences.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK));
        item_preferences.setText(Constant.BUTTON_TEXT_PREFERENCES);
        jmenu_file.add(item_preferences);

        menu_bar.add(jmenu_file);

        jmenu_edit.setText("Edit");

        item_clear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK));
        item_clear.setText(Constant.BUTTON_TEXT_CLEAR);
        jmenu_edit.add(item_clear);

        menu_bar.add(jmenu_edit);

        jmenu_Help.setText("Help");

        item_about.setText(Constant.BUTTON_TEXT_ABOUT);
        jmenu_Help.add(item_about);

        menu_bar.add(jmenu_Help);

        setJMenuBar(menu_bar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tool_bar1, javax.swing.GroupLayout.DEFAULT_SIZE, 710, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jDesktopMainPane)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tool_bar1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(211, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(131, 131, 131)
                    .addComponent(jDesktopMainPane)))
        );

        //tool_bar1.setEnabled(false);
        tool_bar1.setFloatable( false);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bSolveTSP;
    private javax.swing.JButton bStop;
    private javax.swing.JButton bToggleAccelerator;
    private javax.swing.JButton bVisualizeAlgo;
    private javax.swing.JMenuItem item_about;
    private javax.swing.JMenuItem item_clear;
    private javax.swing.JMenuItem item_load_algorithms;
    private javax.swing.JMenuItem item_load_tsp;
    private javax.swing.JMenuItem item_preferences;
    private javax.swing.JMenuItem item_save_tsp;
    private javax.swing.JDesktopPane jDesktopMainPane;
    private javax.swing.JMenu jmenu_Help;
    private javax.swing.JMenu jmenu_edit;
    private javax.swing.JMenu jmenu_file;
    private javax.swing.JLabel labelAlgoName;
    private javax.swing.JLabel label_cost;
    private javax.swing.JLabel label_distance;
    private javax.swing.JLabel label_mst_weight;
    private javax.swing.JLabel label_net_depth;
    private javax.swing.JLabel label_time;
    private javax.swing.JList<String> list_algo_names;
    private GUI.JPanelObserver main_panel;
    private javax.swing.JMenuBar menu_bar;
    private javax.swing.JRadioButton radio_b_create;
    private javax.swing.JRadioButton radio_b_delete;
    private javax.swing.JRadioButton radio_b_move;
    private javax.swing.JScrollPane scroll_algo_names;
    private javax.swing.JTextField text_field_distance;
    private javax.swing.JTextField text_field_mst;
    private javax.swing.JTextField text_field_net_depth;
    private javax.swing.JToolBar tool_bar1;
    // End of variables declaration//GEN-END:variables

    private void setToolBarLayout() {

        GroupLayout layout = new GroupLayout(tool_bar1);
        tool_bar1.setLayout(layout);

        layout.setAutoCreateGaps(true);
        layout.setAutoCreateContainerGaps(true);

        layout.setHorizontalGroup(
                layout.createSequentialGroup()
                        .addGroup(
                                layout.createParallelGroup().addGap(10)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(radio_b_create)
                                                .addComponent(radio_b_move)
                                                .addComponent(radio_b_delete)
                                        )
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(bSolveTSP)
                                                .addComponent(bVisualizeAlgo)
                                                .addComponent(bStop)
                                        )
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(labelAlgoName)
                                                .addComponent(scroll_algo_names)
                                        )
                                        .addGap(600)
                        )
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup()
                                        .addComponent(bToggleAccelerator)
                                        .addComponent(label_cost)
                                        .addComponent(label_time)
                                )
                        )
                        .addGap(100)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup()
                                        .addComponent(label_distance)
                                        .addComponent(label_mst_weight)
                                        .addComponent(label_net_depth)
                                )
                                .addGroup(layout.createParallelGroup()
                                        .addComponent(text_field_distance)
                                        .addComponent(text_field_mst)
                                        .addComponent(text_field_net_depth)
                                )
                        )
        );
        layout.setVerticalGroup(
                layout.createParallelGroup().addGroup(
                        layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(radio_b_create)
                                        .addComponent(radio_b_move)
                                        .addComponent(radio_b_delete)
                                )
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(bSolveTSP)
                                        .addComponent(bVisualizeAlgo)
                                        .addComponent(bStop)
                                )
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelAlgoName)
                                        .addComponent(scroll_algo_names)
                                )
                )
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(bToggleAccelerator))
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(label_cost))
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(label_time))
                        )
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(label_distance)
                                        .addComponent(text_field_distance))
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(label_mst_weight)
                                        .addComponent(text_field_mst))
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(label_net_depth)
                                        .addComponent(text_field_net_depth))
                        )
        );

    }

    private void setRadioButtons() {
        ButtonGroup radio_button_group = new ButtonGroup();
        radio_button_group.add(radio_b_create);
        radio_button_group.add(radio_b_delete);
        radio_button_group.add(radio_b_move);
    }

    private void setOnlyNumbersTextFields() {

        text_field_distance.addKeyListener(new DoubleNumbersKeyListener());
        text_field_mst.addKeyListener(new DoubleNumbersKeyListener());
        text_field_net_depth.addKeyListener(new IntegerNumbersKeyListener());
    }


    private class DoubleNumbersKeyListener implements KeyListener {

        final private HashSet<Character> valid_keys = new HashSet<>();
        final private ArrayList<Character> sequence = new ArrayList<>();

        public DoubleNumbersKeyListener() {
            valid_keys.add('.');
            valid_keys.add('0');
            valid_keys.add('1');
            valid_keys.add('2');
            valid_keys.add('3');
            valid_keys.add('4');
            valid_keys.add('5');
            valid_keys.add('6');
            valid_keys.add('7');
            valid_keys.add('8');
            valid_keys.add('9');
            valid_keys.add((char) KeyEvent.VK_BACK_SPACE);
            valid_keys.add((char) KeyEvent.VK_DELETE);
        }

        @Override
        public void keyTyped(KeyEvent event) {
            char c = event.getKeyChar();
            if (!valid_keys.contains(c)) {
                event.consume();
            } else {
                if (c == KeyEvent.VK_DELETE || c == KeyEvent.VK_BACK_SPACE) {
                    if (!sequence.isEmpty()) {
                        char last = sequence.remove(sequence.size() - 1);
                        if (last == '.') {
                            valid_keys.add(last);
                        }
                    }
                } else {
                    sequence.add(c);
                    if (c == '.') {
                        valid_keys.remove(c);
                    }
                }
            }
        }

        @Override
        public void keyPressed(KeyEvent e) {

        }

        @Override
        public void keyReleased(KeyEvent e) {

        }

    }

    private class IntegerNumbersKeyListener implements KeyListener {

        final private HashSet<Character> valid_keys = new HashSet<>();

        public IntegerNumbersKeyListener() {
            valid_keys.add('0');
            valid_keys.add('1');
            valid_keys.add('2');
            valid_keys.add('3');
            valid_keys.add('4');
            valid_keys.add('5');
            valid_keys.add('6');
            valid_keys.add('7');
            valid_keys.add('8');
            valid_keys.add('9');
            valid_keys.add((char) KeyEvent.VK_BACK_SPACE);
            valid_keys.add((char) KeyEvent.VK_DELETE);
        }

        @Override
        public void keyTyped(KeyEvent event) {
            char c = event.getKeyChar();
            if (!valid_keys.contains(c)) {
                event.consume();
            }
        }

        @Override
        public void keyPressed(KeyEvent e) {

        }

        @Override
        public void keyReleased(KeyEvent e) {

        }

    }
}
